;;; cad-svg.el --- svg drawing functions for elisp-cad

;; Copyright (C) 2014, 2015  John Sturdy

;; Author: John Sturdy <john.sturdy@arm.com>
;; Keywords: multimedia

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; cad-use-target-transforms is implemented only partially in this
;; output mode.

;;; Code:

(defvar cad-svg-prefix ""
  "String to prepend to each line of SVG output.")

(defvar cad-svg-unit ""
  "The current unit marker.")

(defvar cad-svg-units
  '((default . "")
    (in . "in")
    (inches . "in")
    (inch . "in")
    (px . "px")
    (pixels . "px")
    (pixel . "px")
    (mm . "mm")
    (millimetres . "mm")
    (millimetre . "mm")
    (cm . "cm")
    (centimetres . "cm")
    (centimetre . "cm"))
  "Translations of units to svg's terminology.")

(defmodal cad-preamble nxml-mode (width height unit)
  (setq cad-svg-unit (cdr (assoc unit cad-svg-units)))
  (insert "<!-- generated by cad.el at " (current-time-string) " -->\n"
	  (format "<svg width=\"%f%s\" height=\"%f%s\">\n"
		  width cad-svg-unit height cad-svg-unit))
  (when cad-use-target-transforms
    (insert (format "<g transform=\"scale(1,-1)\"><g transform=\"translate(0,%d)\">\n" (- height))))
  (setq cad-svg-prefix "  ")
  ;; todo: incorporate UNIT into matrix
  (translate-matrix (scale-matrix (ident-matrix)
				  1.0 -1.0)
		    0.0 (* -1.0 height)))

(defmodal cad-postamble nxml-mode ()
  (when cad-use-target-transforms
    (insert "</g></g>\n"))
  (insert "</svg>\n"))

(defmodal begin-rotate nxml-mode (rad deg)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g transform=\"rotate(%f)\">\n"
		    "<!-- rotate %f -->\n")
		  deg))
  (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-rotate nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end rotate -->\n")))

(defmodal begin-translate nxml-mode (xd yd)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g transform=\"translate(%f%s,%f%s)\">\n"
		    "<!-- translate %f%s,%f%s -->\n")
		  ;; todo: scale these
		  xd cad-svg-unit yd cad-svg-unit))
    (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-translate nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end translate -->\n")))

(defmodal begin-scale nxml-mode (xs ys)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g transform=\"scale(%f,%f)\">\n"
		    "<!-- scale %f,%f -->\n")
		  xd yd))
  (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-scale nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end scale -->\n")))

(defmodal begin-colour nxml-mode (colour)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g stroke=\"%s\">\n"
		    "<!-- colour -->\n")
		  colour))
  (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-colour nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end colour -->\n")))

(defmodal newpath nxml-mode ()
  (setq xc nil
	yc nil))

(defmodal cutpath nxml-mode ())

(defmodal engravepath nxml-mode ())

(defmodal fillpath nxml-mode ())

(defmodal moveto nxml-mode (x y)
  (setq xc x yc y))

(defmodal lineto nxml-mode (x y)
  (insert cad-svg-prefix
	  (format "<line x1=\"%f%s\" y1=\"%f%s\" x2=\"%f%s\" y2=\"%f%s\"/>\n"
		  xc cad-svg-unit yx cad-svg-unit x cad-svg-unit y cad-svg-unit))
  (setq xc x yc y))

(defun svg-fill-stroke ()
  "Return the style string for an svg shape."
  (if (eq action 'fillpath)
      (format "fill=\"%s\"" cad-colour)
    (format "stroke=\"%s\" fill=\"none\"" cad-colour)))

(defmodal cad-circle nxml-mode (r &optional label)
  ;; todo: change the parameters this takes, to suit the top-level circle command
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      (format "<circle cx=\"%f%s\" cy=\"%f%s\" r=\"%f%s\" %s/>%s\n"
		      xc cad-svg-unit yc cad-svg-unit
		      r cad-svg-unit
		      (svg-fill-stroke)
		      (if label
			  (concat " <!--" (symbol-name label) "-->")
			""))
	    (format "<circle cx=\"%f\" cy=\"%f\" r=\"%f\" %s/>%s\n"
		    (tx xc yc) (ty xc yc)
		    (* (/ (+ xx yy) 2) r)
		    (svg-fill-stroke)
		    (if label
			(concat " <!--" (symbol-name label) "-->")
		      "")))))

(defmodal cad-rectangle nxml-mode (left bottom width height &optional label)
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      (format "<rect x=\"%f%s\" y=\"%f%s\" width=\"%f%s\" height=\"%f%s\" %s/>%s\n"
		      left cad-svg-unit bottom cad-svg-unit
		      width cad-svg-unit height cad-svg-unit
		      (svg-fill-stroke)
		      (if label
			  (concat " <!--" (symbol-name label) "-->")
			""))
	    (let ((x2 (+ left w))
		  (y2 (+ bottom h)))
	      (format "<polygon points=\"%f %f, %f %f, %f %f, %f %f\" %s/>%s\n"
		      (tx left bottom) (ty left bottom)
		      (tx left y2) (ty left y2)
		      (tx x2 y2) (ty x2 y2)
		      (tx x2 bottom) (ty x2 bottom)
		      (svg-fill-stroke)
		      (if label
			  (concat " <!--" (symbol-name label) "-->")
			""))))))

(defmodal cad-rounded-rectangle nxml-mode (left bottom width height radius &optional label)
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      (let* ((left2 (+ left radius))
		     (bottom2 (+ bottom radius))
		     (right (+ left width))
		     (top (+ bottom height))
		     (right2 (- right radius))
		     (top2 (- top radius))
		     (direction 0))
		(format "<path d=\"M %f%s %f%s L %f%s %f%s A %f%s %f%s 0 0 %f%s %f%s %d L %f%s %f%s A %f%s %f%s 0 0 %f%s %f%s %d L %f%s %f%s A %f%s %f%s 0 0 %f%s %f%s %d L %f%s %f%s A %f%s %f%s 0 0 %f%s %f%s %d\" %s/>%s\n"
			left cad-svg-unit bottom2 cad-svg-unit
			left cad-svg-unit top2 cad-svg-unit
			radius cad-svg-unit radius cad-svg-unit direction cad-svg-unit left2 cad-svg-unit top cad-svg-unit
			right2 cad-svg-unit top cad-svg-unit
			radius cad-svg-unit radius cad-svg-unit direction cad-svg-unit right cad-svg-unit top2 cad-svg-unit
			right cad-svg-unit bottom2 cad-svg-unit
			radius cad-svg-unit radius cad-svg-unit direction cad-svg-unit right2 cad-svg-unit bottom cad-svg-unit
			left2 cad-svg-unit bottom cad-svg-unit
			radius cad-svg-unit radius cad-svg-unit direction left bottom2
			(svg-fill-stroke)
			(if label
			    (concat " <!--" (symbol-name label) "-->")
			  "")))
	    (format "Not yet implemented"))))

(defmodal cad-arc nxml-mode (cx cy r a1 a2 &optional label)
  (let* ((th1 (degrees-to-radians a1))
	 (th2 (degrees-to-radians a2))
	 (x1 (+ cx (* r (cos th1))))
	 (y1 (+ cy (* r (sin th1))))
	 (x2 (+ cx (* r (cos th2))))
	 (y2 (+ cy (* r (sin th2))))
	 (clockwise (> a1 a2))
	 (major (> (abs (- a1 a2)) 180))
	 )
    (message "%s %s arc" (if clockwise "clockwise" "anticlockwise") (if major "major" "minor"))
    ;; todo: lots of fiddling on this, need to get whether it's a major or minor arc, etc
    (insert "<!-- "
	    (if clockwise "clockwise" "anticlockwise")
	    " "
	    (if major "major" "minor")
	    " -->\n"
	    cad-svg-prefix
	    (format "<path d=\"M %f%s %f%s A %f%s %f%s 0 0 1 %f%s %f%s\" %s/>%s\n"
		    x1 cad-svg-unit y1 cad-svg-unit
		    r cad-svg-unit r cad-svg-unit
		    x2 cad-svg-unit y2 cad-svg-unit
		    (svg-fill-stroke)
		    (if label
			(concat " <!--" (symbol-name label) "-->")
		      "")))))

(provide 'cad-svg)

;;; cad-svg.el ends here
