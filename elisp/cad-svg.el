;;; cad-svg.el --- svg drawing functions for elisp-cad

;; Copyright (C) 2014  John Sturdy

;; Author: John Sturdy <john.sturdy@arm.com>
;; Keywords: multimedia

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; 

;;; Code:

(defvar cad-svg-prefix ""
  "String to prepend to each line of SVG output.")

(defmodal cad-preamble nxml-mode (width height)
  (insert "<!-- generated by cad.el at " (current-time-string) " -->\n"
	  (format "<svg width=\"%d\" height=\"%d\">\n"
		  width height))
  (setq cad-svg-prefix "  ")
  (translate-matrix (scale-matrix (ident-matrix) 1.0 -1.0) 0.0 (* -1.0 height)))

(defmodal cad-postamble nxml-mode ()
  (insert "</svg>\n"))

(defmodal begin-rotate nxml-mode (rad deg)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g transform=\"rotate(%f)\">\n"
		    "<!-- rotate %f -->\n")
		  deg))
  (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-rotate nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end rotate -->\n")))

(defmodal begin-translate nxml-mode (xd yd)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g transform=\"translate(%f,%f)\">\n"
		    "<!-- translate %f,%f -->\n")
		  xd yd))
    (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-translate nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end translate -->\n")))

(defmodal begin-scale nxml-mode (xs ys)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g transform=\"scale(%f,%f)\">\n"
		    "<!-- scale %f,%f -->\n")
		  xd yd))
  (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-scale nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end scale -->\n")))

(defmodal begin-colour nxml-mode (colour)
  (insert cad-svg-prefix 
	  (format (if cad-use-target-transforms
		      "<g stroke=\"%s\">\n"
		    "<!-- colour -->\n")
		  colour))
  (setq cad-svg-prefix (concat "  " cad-svg-prefix)))

(defmodal end-colour nxml-mode ()
  (setq cad-svg-prefix (substring cad-svg-prefix 2))
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      "</g>\n"
	    "<!-- end colour -->\n")))

(defmodal newpath nxml-mode ())

(defmodal cutpath nxml-mode ())

(defmodal engravepath nxml-mode ())

(defmodal fillpath nxml-mode ())

(defmodal moveto nxml-mode (x y)
  (setq xc x yc y))

(defmodal lineto nxml-mode (x y))

(defmodal arc nxml-mode (xc yc r ang1 ang2))

(defun svg-fill-stroke ()
  "Return the style string for an svg shape."
  (if (eq action 'fillpath)
      (format "fill=\"%s\"" cad-colour)
    (format "stroke=\"%s\" fill=\"none\"" cad-colour)))

(defmodal circle nxml-mode (r &optional label)
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      (format "<circle cx=\"%f\" cy=\"%f\" r=\"%f\" %s/>%s\n"
		      xc yc
		      r
		      (svg-fill-stroke)
		      (if label
			  (concat " <!--" label "-->")
			""))
	    (format "<circle cx=\"%f\" cy=\"%f\" r=\"%f\" %s/>%s\n"
		    (tx xc yc) (ty xc yc)
		    (* (/ (+ xx yy) 2) r)
		    (svg-fill-stroke)
		    (if label
			(concat " <!--" label "-->")
		      "")))))

(defmodal rectangle nxml-mode (w h &optional label)
  (insert cad-svg-prefix
	  (if cad-use-target-transforms
	      (format "<rect x=\"%f\" y=\"%f\" width=\"%f\" height=\"%f\" %s/>%s\n"
		      xc yc
		      w h
		      (svg-fill-stroke)
		      (if label
			  (concat " <!--" label "-->")
			""))
	    (let ((x2 (+ xc w))
		  (y2 (+ yc h)))
	      (format "<polygon points=\"%f %f, %f %f, %f %f, %f %f\" %s/>%s\n"
		      (tx xc yc) (ty xc yc)
		      (tx xc y2) (ty xc y2)
		      (tx x2 y2) (ty x2 y2)
		      (tx x2 yc) (ty x2 yc)
		      (svg-fill-stroke)
		      (if label
			  (concat " <!--" label "-->")
			""))))))


(defmodal arc nxml-mode (cx cy r a1 a2 &optional label)
  (let* ((th1 (degrees-to-radians a1))
	 (th2 (degrees-to-radians a2))
	 (x1 (+ cx (* r (cos th1))))
	 (y1 (+ cy (* r (sin th1))))
	 (x2 (+ cx (* r (cos th2))))
	 (y2 (+ cy (* r (sin th2))))
	 (clockwise (> a1 a2))
	 )
    (insert cad-svg-prefix
	    (format "<path d=\"M %f %f A %f %f 0 0 0 %f %f\" %s/>%s\n"
		    x1 y1
		    r r
		    x2 y2
		    (svg-fill-stroke)
		    (if label
			(concat " <!--" label "-->")
		      "")))))

(provide 'cad-svg)

;;; cad-svg.el ends here
